":" Copy+paste the next 2 lines or do: bash ./THIS_FILE_HERE
"git" clone https://github.com/hilbix/fix.git "$HOME/git/tino-fix/"
"ln" --symbolic --backup=t --relative "$HOME/git/tino-fix/home/vimrc" "$HOME/.vimrc"
"return"; exit

" set nomodelineexpr		" prevent CVE-2019-12735 with modeline (>=vim 8.1.x)
" set modeline			" enable things like # vim: ft=sh

set swapsync=			" disable sync, huge advantage on ZFS, minor disadvantage
set secure
set nomodeline			" disable modeline, see CVE-2019-12735
" use securemodelines instead of insecure modeline
if filereadable(expand('~/.vim/plugins/securemodelines.vim'))
  " In case you cannot sudo:
  " apt-get download vim-scripts && dpkg -x vim-scripts_*_all.deb tmp/
  " cp tmp/usr/share/vim-scripts/plugin/securemodelines.vim ~/.vim/plugins/
  source ~/.vim/plugins/securemodelines.vim
elseif filereadable('/usr/share/vim-scripts/secure-modelines/plugin/securemodelines.vim')
  source /usr/share/vim-scripts/secure-modelines/plugin/securemodelines.vim
else
  " sudo apt-get install vim-scripts
  source /usr/share/vim-scripts/plugin/securemodelines.vim
endif

let g:secure_modelines_verbose=1

set cul				" Highlight cursor line:
hi CursorLine term=none cterm=none ctermbg=0

" For more things perhaps see https://apfelboymchen.net/gnu/configstuff/scripts/usr/local/etc/vim/vimrc.html
set showcmd			" Show (partial) command in status line.
set showmatch			" Show matching brackets.
set ignorecase			" Do case insensitive matching
set smartcase			" Do smart case matching
set incsearch			" Incremental search
set autowrite			" Automatically save before commands like :next and :make
syntax on			" of course

set background=dark		" I always use dark terminals for better contrast and more easy reading

hi MySHOW ctermbg=black		" Highlight TABs and trailing spaces
match MySHOW /\(\t\)\|\(\s\s*$\)/

" TAB is 8, it always has been and always will be.  Right?
set ts=8 sw=8 noet ai ru fo=cqrt ls=2 shm=at
map Q :q<CR>

" Easy make: "M" to "make" and jump to first error, ESC+M to "make clean"
nnoremap M :silent make\|redraw!\|cw\|silent cc<CR>
nnoremap <Esc>m :silent make clean\|silent make\|redraw!\|cw\|silent cc<CR>

" Easy to detect error output:
" #W#path/to/file#line#column#warning message#
" #E#path/to/file#line#column#error message#
set efm+=#%t#%f#%l#%c#%m#
set efm+=#%t#%f#%l##%m#
set efm+=#%t#%f###%m#
set efm+=#%t#%f##%c#%m#
" Jump to prev/next error (on sane keyboards there is a gap between F4 and F5, so easy to reach, spot and use)
nnoremap <F4> :cprevious<CR>
nnoremap <F5> :cnext<CR>

if has("autocmd")
  augroup vimrc
    autocmd!
    " Remember last position
    autocmd BufReadPost *	if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    " !WARNING!  Following only works for the standard TAB setting of 8
    " :P is just easy to type, adjust to the TAB setting
    autocmd FileType *		command! P %s#^\(\(        \)*\)\(\t\+\)#\=(submatch(1).repeat('        ',len(submatch(3))))
    " this must be adjusted to the TAB stop setting of FT python, it's 8 at my side
    autocmd FileType python	command! P %s#^\(\t*\)\(\(        \)\+\)#\=(submatch(1).repeat('	',len(submatch(2))/8))
    " keep shell type separate
    autocmd FileType bash,sh	command! P %s#^\(\t*\)\(\(        \)\+\)#\=(submatch(1).repeat('	',len(submatch(2))/8))
  augroup END
else
  command P %s/^\(\(        \)*\)\(\t\+\)/\=(submatch(1).repeat('        ',len(submatch(3))))
endif
" Sometimes autocommand above seems to fail, install some fallback for this case:
command PP %s/^\(\(        \)*\)\(\t\+\)/\=(submatch(1).repeat('        ',len(submatch(3))))
command PPP %s#^\(\t*\)\(\(        \)\+\)#\=(submatch(1).repeat('	',len(submatch(2))/8))

" see https://github.com/ConradIrwin/vim-bracketed-paste/blob/master/plugin/bracketed-paste.vim
let g:loaded_bracketed_paste = 1

let &t_ti .= "\<Esc>[?2004h"
let &t_te .= "\<Esc>[?2004l"

function! XTermPasteBegin(ret)
  set pastetoggle=<f29>
  set paste
  return a:ret
endfunction

execute "set <f28>=\<Esc>[200~"
execute "set <f29>=\<Esc>[201~"
map <expr> <f28> XTermPasteBegin("i")
imap <expr> <f28> XTermPasteBegin("")
vmap <expr> <f28> XTermPasteBegin("c")
cmap <f28> <nop>
cmap <f29> <nop>

let g:secure_modelines_allowed_items = [
                \ "number",      "nu",
                \ "textwidth",   "tw",
                \ "softtabstop", "sts",
                \ "tabstop",     "ts",
                \ "shiftwidth",  "sw",
                \ "expandtab",   "et",   "noexpandtab", "noet",
                \ "filetype",    "ft",
                \ "foldmethod",  "fdm",
                \ "readonly",    "ro",   "noreadonly", "noro",
                \ "rightleft",   "rl",   "norightleft", "norl",
                \ "cindent",     "cin",  "nocindent", "nocin",
                \ "smartindent", "si",   "nosmartindent", "nosi",
                \ "autoindent",  "ai",   "noautoindent", "noai",
                \ "spell", "nospell",
                \ "spelllang",
                \ "wrap", "nowrap",
                \ "syntax"
                \ ]
" Things I always forget about in VIM:
"	:help cmd	explain cmd
"	G~		change case.  ~ can be used with visual, too
"	cc		
"	C-o	C-i	Jump to older / newer positions across files
"
"	:marks		list marks, see: :help mark-motions
"	mx		set mark (M is make, C-M is CR, M-M is make clean!)
"	`x		jump to mark within same buffer.  Also: d`x c`x y`x
"	`X		jump to mark within file where mark was set
"	`0	`9	0=jump to last edited file, 1=second last, and so on
"	`.	`"	last change / last exit
"	`[	`]	begin/end of previous yank
"	`<	`>	begin/end of visual
"	'x		same as ` but in line mode
"	``	''	Jump to last position
"	['	]'	jump to prev / next mark (also with (' )' {' }')
"	:delmarks!	delete all lowercase marks
"	:delm xy	delete marks x and y
"	:delm a-x	delete marks a to x
"
"	Qx		start macro until next Q
"	@x		play macro
"	@@		play last macro
"
"	:set number	show line numbers
"
" vimdiff	commands with multiple panes / run a diff side by side
"	do		get other changes (full block!)
"	dp		put changes to other
"	[c	]c	prev / next change
"
"	:diffu		update vimdiff after (manual/extern) changes
"	:difft file	start vimdiff mode from within vim
"	:diffo		end vimdiff mode
"
"	C-wC-w	C-ww	switch buffer
"	C-wC-x	C-wx	swap buffer positions
"	C-wC-q	C-wq	close current buffer (quit if last)
"
"	:ls		list all buffers
"	:sp [file]	open split (horizontal split bar: top-down)
"	:vs [file]	open split (vertical split bar:   left|right)
"	:bw		wipe (forget) buffer (including marks)
"	:bn		next buffer
"	:bp		prev buffer
"
" Modelines:
"	# vim: setting:setting:setting
"	# vim: set setting setting setting : comment
"
"	vim: ft=bash
"	vim: ft=bash : comment
"
" Things my fingers type automatically (but might be important to others):
"	ESC		exit back to anything, but do not exit vim
"	.		repeat last short command (like insert etc.)
"	dd	dw	delete line / delete word
"	C	cw	Change line behind the cursor / change word
"	rx	R	replace character / replace mode
"	i	I	insert / insert at the start of line
"	A	a	append to end of line / append after cursor
"	x	X	remove character under cursor / before cursor
"	u	C-R	undo / redo
"	V		(visual) select lines
"	v		(visual) select text
"	C-v		(visual) select block
"	gg	:0	first line
"	G	:$	last line
"	:q		close current buffer if unchanged
"	:wq	ZZ	save current buffer and close it
"	:q!	ZQ	force quit discarding changes
"
" The last line protects against:
" "I use vim for almost two decades now, because I do not know how to exit it"

